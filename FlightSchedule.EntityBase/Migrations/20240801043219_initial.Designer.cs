// <auto-generated />
using System;
using FlightSchedule.EntityBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightSchedule.EntityBase.Migrations
{
    [DbContext(typeof(FlightScheduleDbContext))]
    [Migration("20240801043219_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightSchedule.EntityBase.Entity.Flight", b =>
                {
                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("FlightId");

                    b.HasIndex("AirlineId")
                        .HasDatabaseName("idx_flight_airline_id");

                    b.HasIndex("DepartureTime")
                        .HasDatabaseName("idx_flight_departure_time");

                    b.HasIndex("RouteId");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("FlightSchedule.EntityBase.Entity.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<int>("DestinationCityId")
                        .HasColumnType("int");

                    b.Property<int>("OriginCityId")
                        .HasColumnType("int");

                    b.HasKey("RouteId");

                    b.HasIndex("DepartureDate")
                        .HasDatabaseName("idx_route_departure_date");

                    b.HasIndex("OriginCityId", "DestinationCityId", "DepartureDate")
                        .IsUnique();

                    b.ToTable("Route");
                });

            modelBuilder.Entity("FlightSchedule.EntityBase.Entity.Subscription", b =>
                {
                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationCityId")
                        .HasColumnType("int");

                    b.Property<int>("OriginCityId")
                        .HasColumnType("int");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("FlightSchedule.EntityBase.Entity.Flight", b =>
                {
                    b.HasOne("FlightSchedule.EntityBase.Entity.Route", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FlightSchedule.EntityBase.Entity.Route", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
